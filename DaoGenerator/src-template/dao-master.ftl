<#--

Copyright (C) 2011 Markus Junginger, greenrobot (http://greenrobot.de)

This file is part of greenDAO Generator.

greenDAO Generator is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
greenDAO Generator is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with greenDAO Generator.  If not, see <http://www.gnu.org/licenses/>.

-->
package ${schema.javaPackageMasterSession};

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.IdentityScopeType;

<#list schema.entities as entity>
<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
import ${entity.javaPackageDao}.${entity.classNameDao};
</#if>
</#list>

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * Master of DAO (schema version ${schema.version}): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = ${schema.version?c};

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
<#list schema.entities as entity>
<#if (!entity.skipTableCreation && (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp)))>
        ${entity.classNameDao}.createTable(db, ifNotExists);
</#if>
</#list>
    }

    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
<#list schema.entities as entity>
<#if (!entity.skipTableCreation && (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp)))>
        ${entity.classNameDao}.dropTable(db, ifExists);
</#if>
</#list>
    }

    public static abstract class OpenHelper extends SQLiteOpenHelper {
        private Runnable onPostTableCreateRunnable;

        public OpenHelper(Context context, String name, CursorFactory factory, Runnable onPostTableCreateRunnable) {
            super(context, name, factory, SCHEMA_VERSION);
            this.onPostTableCreateRunnable = onPostTableCreateRunnable;
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
            if (onPostTableCreateRunnable != null) {
                onPostTableCreateRunnable.run();
            }
        }
    }

    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory, Runnable onPostTableCreateRunnable) {
            super(context, name, factory, onPostTableCreateRunnable);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
<#list schema.entities as entity>
<#if (!entity.onlyForApps?has_content || entity.onlyForApps?seq_contains(schema.generateForApp))>
        registerDaoClass(${entity.classNameDao}.class);
</#if>
</#list>
    }

    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }

    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }

}
